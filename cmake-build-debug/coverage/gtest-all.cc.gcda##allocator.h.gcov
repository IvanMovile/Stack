        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX14.2.sdk/usr/include/c++/v1/__memory/allocator.h
        -:    0:Graph:/Users/ivanmovile/CLionProjects/Stack/cmake-build-debug/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/Users/ivanmovile/CLionProjects/Stack/cmake-build-debug/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___MEMORY_ALLOCATOR_H
        -:   11:#define _LIBCPP___MEMORY_ALLOCATOR_H
        -:   12:
        -:   13:#include <__config>
        -:   14:#include <__memory/allocate_at_least.h>
        -:   15:#include <__memory/allocator_traits.h>
        -:   16:#include <__type_traits/is_constant_evaluated.h>
        -:   17:#include <__type_traits/is_same.h>
        -:   18:#include <__type_traits/is_void.h>
        -:   19:#include <__type_traits/is_volatile.h>
        -:   20:#include <__utility/forward.h>
        -:   21:#include <cstddef>
        -:   22:#include <new>
        -:   23:#include <stdexcept>
        -:   24:
        -:   25:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   26:#  pragma GCC system_header
        -:   27:#endif
        -:   28:
        -:   29:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   30:
        -:   31:template <class _Tp> class allocator;
        -:   32:
        -:   33:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_VOID_SPECIALIZATION)
        -:   34:// These specializations shouldn't be marked _LIBCPP_DEPRECATED_IN_CXX17.
        -:   35:// Specializing allocator<void> is deprecated, but not using it.
        -:   36:template <>
        -:   37:class _LIBCPP_TEMPLATE_VIS allocator<void>
        -:   38:{
        -:   39:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -:   40:public:
        -:   41:    _LIBCPP_DEPRECATED_IN_CXX17 typedef void*             pointer;
        -:   42:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       const_pointer;
        -:   43:    _LIBCPP_DEPRECATED_IN_CXX17 typedef void              value_type;
        -:   44:
        -:   45:    template <class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {typedef allocator<_Up> other;};
        -:   46:#endif
        -:   47:};
        -:   48:
        -:   49:template <>
        -:   50:class _LIBCPP_TEMPLATE_VIS allocator<const void>
        -:   51:{
        -:   52:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -:   53:public:
        -:   54:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       pointer;
        -:   55:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void*       const_pointer;
        -:   56:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const void        value_type;
        -:   57:
        -:   58:    template <class _Up> struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {typedef allocator<_Up> other;};
        -:   59:#endif
        -:   60:};
        -:   61:#endif
        -:   62:
        -:   63:// This class provides a non-trivial default constructor to the class that derives from it
        -:   64:// if the condition is satisfied.
        -:   65://
        -:   66:// The second template parameter exists to allow giving a unique type to __non_trivial_if,
        -:   67:// which makes it possible to avoid breaking the ABI when making this a base class of an
        -:   68:// existing class. Without that, imagine we have classes D1 and D2, both of which used to
        -:   69:// have no base classes, but which now derive from __non_trivial_if. The layout of a class
        -:   70:// that inherits from both D1 and D2 will change because the two __non_trivial_if base
        -:   71:// classes are not allowed to share the same address.
        -:   72://
        -:   73:// By making those __non_trivial_if base classes unique, we work around this problem and
        -:   74:// it is safe to start deriving from __non_trivial_if in existing classes.
        -:   75:template <bool _Cond, class _Unique>
        -:   76:struct __non_trivial_if { };
        -:   77:
        -:   78:template <class _Unique>
        -:   79:struct __non_trivial_if<true, _Unique> {
        -:   80:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIcEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPcEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEEEEC2B7v160006Ev called 13 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEPvEEEEEEEC2B7v160006Ev called 5 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_11__hash_nodeINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEPvEEEEEC2B7v160006Ev called 5 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIdEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_6vectorIdNS1_IdEEEEEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIN7testing8internal13edit_distance8EditTypeEEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_6vectorIN7testing8internal13edit_distance8EditTypeENS1_IS6_EEEEEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorImEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_11__tree_nodeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEmEEPvEEEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_11__list_nodeINS_4pairIcPKcEEPvEEEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIN7testing14TestPartResultEEEEC2B7v160006Ev called 16 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIN7testing12TestPropertyEEEEC2B7v160006Ev called 16 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPN7testing8TestInfoEEEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIiEEEC2B7v160006Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPN7testing17TestEventListenerEEEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPN7testing11EnvironmentEEEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPN7testing9TestSuiteEEEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEEEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_11__tree_nodeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEPvEEEEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIwEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorINS_11__tree_nodeINS_12basic_stringIcNS_11char_traitsIcEENS1_IcEEEEPvEEEEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__116__non_trivial_ifILb1ENS_9allocatorIN7testing8internal9TraceInfoEEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
       64:   81:    _LIBCPP_CONSTEXPR __non_trivial_if() _NOEXCEPT { }
    $$$$$:   81-block  0
    $$$$$:   81-block  1
       13:   81-block  2
        5:   81-block  3
        5:   81-block  4
    $$$$$:   81-block  5
    $$$$$:   81-block  6
    $$$$$:   81-block  7
    $$$$$:   81-block  8
    $$$$$:   81-block  9
    $$$$$:   81-block 10
    $$$$$:   81-block 11
       16:   81-block 12
       16:   81-block 13
        1:   81-block 14
        2:   81-block 15
        1:   81-block 16
        1:   81-block 17
        1:   81-block 18
        1:   81-block 19
        1:   81-block 20
    $$$$$:   81-block 21
        1:   81-block 22
    $$$$$:   81-block 23
        -:   82:};
        -:   83:
        -:   84:// allocator
        -:   85://
        -:   86:// Note: For ABI compatibility between C++20 and previous standards, we make
        -:   87://       allocator<void> trivial in C++20.
        -:   88:
        -:   89:template <class _Tp>
        -:   90:class _LIBCPP_TEMPLATE_VIS allocator
        -:   91:    : private __non_trivial_if<!is_void<_Tp>::value, allocator<_Tp> >
        -:   92:{
        -:   93:    static_assert(!is_volatile<_Tp>::value, "std::allocator does not support volatile types");
        -:   94:public:
        -:   95:    typedef size_t      size_type;
        -:   96:    typedef ptrdiff_t   difference_type;
        -:   97:    typedef _Tp         value_type;
        -:   98:    typedef true_type   propagate_on_container_move_assignment;
        -:   99:    typedef true_type   is_always_equal;
        -:  100:
        -:  101:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
function _ZNSt3__19allocatorIcEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIPcEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEEC2B7v160006Ev called 13 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIcEC1B7v160006Ev called 6 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEPvEEEEEC2B7v160006Ev called 5 returned 100% blocks executed 100%
function _ZNSt3__19allocatorINS_11__hash_nodeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEPvEEEC2B7v160006Ev called 5 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIdEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_6vectorIdNS0_IdEEEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7testing8internal13edit_distance8EditTypeEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_6vectorIN7testing8internal13edit_distance8EditTypeENS0_IS5_EEEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorImEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEmEEPvEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__list_nodeINS_4pairIcPKcEEPvEEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7testing14TestPartResultEEC2B7v160006Ev called 16 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIN7testing12TestPropertyEEC2B7v160006Ev called 16 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIPN7testing8TestInfoEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIiEC2B7v160006Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIPN7testing17TestEventListenerEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIPN7testing11EnvironmentEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIPN7testing9TestSuiteEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEPvEEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIwEC2B7v160006Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEPvEEEC2B7v160006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__19allocatorIN7testing8internal9TraceInfoEEC2B7v160006Ev called 0 returned 0% blocks executed 0%
       70:  102:    allocator() _NOEXCEPT = default;
    $$$$$:  102-block  0
    $$$$$:  102-block  1
       13:  102-block  2
        6:  102-block  3
        5:  102-block  4
        5:  102-block  5
    $$$$$:  102-block  6
    $$$$$:  102-block  7
    $$$$$:  102-block  8
    $$$$$:  102-block  9
    $$$$$:  102-block 10
    $$$$$:  102-block 11
    $$$$$:  102-block 12
       16:  102-block 13
       16:  102-block 14
        1:  102-block 15
        2:  102-block 16
        1:  102-block 17
        1:  102-block 18
        1:  102-block 19
        1:  102-block 20
        1:  102-block 21
    $$$$$:  102-block 22
        1:  102-block 23
    $$$$$:  102-block 24
        -:  103:
        -:  104:    template <class _Up>
        -:  105:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
        -:  106:    allocator(const allocator<_Up>&) _NOEXCEPT { }
        -:  107:
        -:  108:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
function _ZNSt3__19allocatorIPcE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIcE8allocateB7v160006Em called 4 returned 100% blocks executed 66%
function _ZNSt3__19allocatorINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEE8allocateB7v160006Em called 13 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIN7testing14TestPartResultEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__hash_nodeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEPvEEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEPvEEEEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIdE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_6vectorIdNS0_IdEEEEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7testing8internal13edit_distance8EditTypeEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_6vectorIN7testing8internal13edit_distance8EditTypeENS0_IS5_EEEEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorImE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEmEEPvEEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__list_nodeINS_4pairIcPKcEEPvEEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7testing12TestPropertyEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIPN7testing8TestInfoEE8allocateB7v160006Em called 5 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIiE8allocateB7v160006Em called 6 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPN7testing17TestEventListenerEE8allocateB7v160006Em called 1 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPN7testing11EnvironmentEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7testing8internal9TraceInfoEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIPN7testing9TestSuiteEE8allocateB7v160006Em called 1 returned 100% blocks executed 66%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEPvEEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEPvEEE8allocateB7v160006Em called 0 returned 0% blocks executed 0%
       30:  109:    _Tp* allocate(size_t __n) {
       30:  110:        if (__n > allocator_traits<allocator>::max_size(*this))
    $$$$$:  110-block  0
branch  0 never executed
branch  1 never executed
        4:  110-block  1
branch  2 taken 0
branch  3 taken 4
       13:  110-block  2
branch  4 taken 0
branch  5 taken 13
    $$$$$:  110-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  110-block  4
branch  8 never executed
branch  9 never executed
    $$$$$:  110-block  5
branch 10 never executed
branch 11 never executed
    $$$$$:  110-block  6
branch 12 never executed
branch 13 never executed
    $$$$$:  110-block  7
branch 14 never executed
branch 15 never executed
    $$$$$:  110-block  8
branch 16 never executed
branch 17 never executed
    $$$$$:  110-block  9
branch 18 never executed
branch 19 never executed
    $$$$$:  110-block 10
branch 20 never executed
branch 21 never executed
    $$$$$:  110-block 11
branch 22 never executed
branch 23 never executed
    $$$$$:  110-block 12
branch 24 never executed
branch 25 never executed
    $$$$$:  110-block 13
branch 26 never executed
branch 27 never executed
        5:  110-block 14
branch 28 taken 0
branch 29 taken 5
        6:  110-block 15
branch 30 taken 0
branch 31 taken 6
        1:  110-block 16
branch 32 taken 0
branch 33 taken 1
    $$$$$:  110-block 17
branch 34 never executed
branch 35 never executed
    $$$$$:  110-block 18
branch 36 never executed
branch 37 never executed
        1:  110-block 19
branch 38 taken 0
branch 39 taken 1
    $$$$$:  110-block 20
branch 40 never executed
branch 41 never executed
    $$$$$:  110-block 21
branch 42 never executed
branch 43 never executed
    #####:  111:            __throw_bad_array_new_length();
    $$$$$:  111-block  0
    $$$$$:  111-block  1
    $$$$$:  111-block  2
    $$$$$:  111-block  3
    $$$$$:  111-block  4
    $$$$$:  111-block  5
    $$$$$:  111-block  6
    $$$$$:  111-block  7
    $$$$$:  111-block  8
    $$$$$:  111-block  9
    $$$$$:  111-block 10
    $$$$$:  111-block 11
    $$$$$:  111-block 12
    $$$$$:  111-block 13
    $$$$$:  111-block 14
    $$$$$:  111-block 15
    $$$$$:  111-block 16
    $$$$$:  111-block 17
    $$$$$:  111-block 18
    $$$$$:  111-block 19
    $$$$$:  111-block 20
    $$$$$:  111-block 21
        -:  112:        if (__libcpp_is_constant_evaluated()) {
        -:  113:            return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  114:        } else {
       30:  115:            return static_cast<_Tp*>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));
    $$$$$:  115-block  0
        4:  115-block  1
       13:  115-block  2
    $$$$$:  115-block  3
    $$$$$:  115-block  4
    $$$$$:  115-block  5
    $$$$$:  115-block  6
    $$$$$:  115-block  7
    $$$$$:  115-block  8
    $$$$$:  115-block  9
    $$$$$:  115-block 10
    $$$$$:  115-block 11
    $$$$$:  115-block 12
    $$$$$:  115-block 13
        5:  115-block 14
        6:  115-block 15
        1:  115-block 16
    $$$$$:  115-block 17
    $$$$$:  115-block 18
        1:  115-block 19
    $$$$$:  115-block 20
    $$$$$:  115-block 21
        -:  116:        }
        -:  117:    }
        -:  118:
        -:  119:#if _LIBCPP_STD_VER > 20
        -:  120:    [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr
        -:  121:    allocation_result<_Tp*> allocate_at_least(size_t __n) {
        -:  122:        return {allocate(__n), __n};
        -:  123:    }
        -:  124:#endif
        -:  125:
        -:  126:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
function _ZNSt3__19allocatorIPcE10deallocateB7v160006EPS1_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEE10deallocateB7v160006EPS5_m called 12 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIcE10deallocateB7v160006EPcm called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7testing14TestPartResultEE10deallocateB7v160006EPS2_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIPNS_16__hash_node_baseIPNS_11__hash_nodeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEPvEEEEE10deallocateB7v160006EPSC_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__hash_nodeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEPvEEE10deallocateB7v160006EPS8_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIdE10deallocateB7v160006EPdm called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_6vectorIdNS0_IdEEEEE10deallocateB7v160006EPS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7testing8internal13edit_distance8EditTypeEE10deallocateB7v160006EPS4_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_6vectorIN7testing8internal13edit_distance8EditTypeENS0_IS5_EEEEE10deallocateB7v160006EPS7_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorImE10deallocateB7v160006EPmm called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEmEEPvEEE10deallocateB7v160006EPSA_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__list_nodeINS_4pairIcPKcEEPvEEE10deallocateB7v160006EPS7_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7testing12TestPropertyEE10deallocateB7v160006EPS2_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIiE10deallocateB7v160006EPim called 4 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPN7testing8TestInfoEE10deallocateB7v160006EPS3_m called 4 returned 100% blocks executed 66%
function _ZNSt3__19allocatorIPN7testing17TestEventListenerEE10deallocateB7v160006EPS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIPN7testing11EnvironmentEE10deallocateB7v160006EPS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIN7testing8internal9TraceInfoEE10deallocateB7v160006EPS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEPvEEE10deallocateB7v160006EPSE_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEE10deallocateB7v160006EPS4_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorIPN7testing9TestSuiteEE10deallocateB7v160006EPS3_m called 0 returned 0% blocks executed 0%
function _ZNSt3__19allocatorINS_11__tree_nodeINS_12basic_stringIcNS_11char_traitsIcEENS0_IcEEEEPvEEE10deallocateB7v160006EPS8_m called 0 returned 0% blocks executed 0%
       20:  127:    void deallocate(_Tp* __p, size_t __n) _NOEXCEPT {
        -:  128:        if (__libcpp_is_constant_evaluated()) {
        -:  129:            ::operator delete(__p);
        -:  130:        } else {
       20:  131:            _VSTD::__libcpp_deallocate((void*)__p, __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
    $$$$$:  131-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  131-block  1
       12:  131-block  2
branch  2 taken 12
branch  3 taken 0
    $$$$$:  131-block  3
    $$$$$:  131-block  4
branch  4 never executed
branch  5 never executed
    $$$$$:  131-block  5
    $$$$$:  131-block  6
branch  6 never executed
branch  7 never executed
    $$$$$:  131-block  7
    $$$$$:  131-block  8
branch  8 never executed
branch  9 never executed
    $$$$$:  131-block  9
    $$$$$:  131-block 10
branch 10 never executed
branch 11 never executed
    $$$$$:  131-block 11
    $$$$$:  131-block 12
branch 12 never executed
branch 13 never executed
    $$$$$:  131-block 13
    $$$$$:  131-block 14
branch 14 never executed
branch 15 never executed
    $$$$$:  131-block 15
    $$$$$:  131-block 16
branch 16 never executed
branch 17 never executed
    $$$$$:  131-block 17
    $$$$$:  131-block 18
branch 18 never executed
branch 19 never executed
    $$$$$:  131-block 19
    $$$$$:  131-block 20
branch 20 never executed
branch 21 never executed
    $$$$$:  131-block 21
    $$$$$:  131-block 22
branch 22 never executed
branch 23 never executed
    $$$$$:  131-block 23
    $$$$$:  131-block 24
branch 24 never executed
branch 25 never executed
    $$$$$:  131-block 25
    $$$$$:  131-block 26
branch 26 never executed
branch 27 never executed
    $$$$$:  131-block 27
        4:  131-block 28
branch 28 taken 4
branch 29 taken 0
    $$$$$:  131-block 29
        4:  131-block 30
branch 30 taken 4
branch 31 taken 0
    $$$$$:  131-block 31
    $$$$$:  131-block 32
branch 32 never executed
branch 33 never executed
    $$$$$:  131-block 33
    $$$$$:  131-block 34
branch 34 never executed
branch 35 never executed
    $$$$$:  131-block 35
    $$$$$:  131-block 36
branch 36 never executed
branch 37 never executed
    $$$$$:  131-block 37
    $$$$$:  131-block 38
branch 38 never executed
branch 39 never executed
    $$$$$:  131-block 39
    $$$$$:  131-block 40
branch 40 never executed
branch 41 never executed
    $$$$$:  131-block 41
    $$$$$:  131-block 42
branch 42 never executed
branch 43 never executed
    $$$$$:  131-block 43
    $$$$$:  131-block 44
branch 44 never executed
branch 45 never executed
    $$$$$:  131-block 45
        -:  132:        }
       20:  133:    }
    $$$$$:  133-block  0
       12:  133-block  1
    $$$$$:  133-block  2
    $$$$$:  133-block  3
    $$$$$:  133-block  4
    $$$$$:  133-block  5
    $$$$$:  133-block  6
    $$$$$:  133-block  7
    $$$$$:  133-block  8
    $$$$$:  133-block  9
    $$$$$:  133-block 10
    $$$$$:  133-block 11
    $$$$$:  133-block 12
    $$$$$:  133-block 13
        4:  133-block 14
        4:  133-block 15
    $$$$$:  133-block 16
    $$$$$:  133-block 17
    $$$$$:  133-block 18
    $$$$$:  133-block 19
    $$$$$:  133-block 20
    $$$$$:  133-block 21
    $$$$$:  133-block 22
        -:  134:
        -:  135:    // C++20 Removed members
        -:  136:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -:  137:    _LIBCPP_DEPRECATED_IN_CXX17 typedef _Tp*       pointer;
        -:  138:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* const_pointer;
        -:  139:    _LIBCPP_DEPRECATED_IN_CXX17 typedef _Tp&       reference;
        -:  140:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& const_reference;
        -:  141:
        -:  142:    template <class _Up>
        -:  143:    struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {
        -:  144:        typedef allocator<_Up> other;
        -:  145:    };
        -:  146:
        -:  147:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  148:    pointer address(reference __x) const _NOEXCEPT {
        -:  149:        return _VSTD::addressof(__x);
        -:  150:    }
        -:  151:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  152:    const_pointer address(const_reference __x) const _NOEXCEPT {
        -:  153:        return _VSTD::addressof(__x);
        -:  154:    }
        -:  155:
        -:  156:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_IN_CXX17
        -:  157:    _Tp* allocate(size_t __n, const void*) {
        -:  158:        return allocate(__n);
        -:  159:    }
        -:  160:
        -:  161:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT {
        -:  162:        return size_type(~0) / sizeof(_Tp);
        -:  163:    }
        -:  164:
        -:  165:    template <class _Up, class... _Args>
        -:  166:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  167:    void construct(_Up* __p, _Args&&... __args) {
        -:  168:        ::new ((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -:  169:    }
        -:  170:
        -:  171:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  172:    void destroy(pointer __p) {
        -:  173:        __p->~_Tp();
        -:  174:    }
        -:  175:#endif
        -:  176:};
        -:  177:
        -:  178:template <class _Tp>
        -:  179:class _LIBCPP_TEMPLATE_VIS allocator<const _Tp>
        -:  180:    : private __non_trivial_if<!is_void<_Tp>::value, allocator<const _Tp> >
        -:  181:{
        -:  182:    static_assert(!is_volatile<_Tp>::value, "std::allocator does not support volatile types");
        -:  183:public:
        -:  184:    typedef size_t      size_type;
        -:  185:    typedef ptrdiff_t   difference_type;
        -:  186:    typedef const _Tp   value_type;
        -:  187:    typedef true_type   propagate_on_container_move_assignment;
        -:  188:    typedef true_type   is_always_equal;
        -:  189:
        -:  190:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
        -:  191:    allocator() _NOEXCEPT = default;
        -:  192:
        -:  193:    template <class _Up>
        -:  194:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
        -:  195:    allocator(const allocator<_Up>&) _NOEXCEPT { }
        -:  196:
        -:  197:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
        -:  198:    const _Tp* allocate(size_t __n) {
        -:  199:        if (__n > allocator_traits<allocator>::max_size(*this))
        -:  200:            __throw_bad_array_new_length();
        -:  201:        if (__libcpp_is_constant_evaluated()) {
        -:  202:            return static_cast<const _Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  203:        } else {
        -:  204:            return static_cast<const _Tp*>(_VSTD::__libcpp_allocate(__n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp)));
        -:  205:        }
        -:  206:    }
        -:  207:
        -:  208:#if _LIBCPP_STD_VER > 20
        -:  209:    [[nodiscard]] _LIBCPP_HIDE_FROM_ABI constexpr
        -:  210:    allocation_result<const _Tp*> allocate_at_least(size_t __n) {
        -:  211:        return {allocate(__n), __n};
        -:  212:    }
        -:  213:#endif
        -:  214:
        -:  215:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
        -:  216:    void deallocate(const _Tp* __p, size_t __n) {
        -:  217:        if (__libcpp_is_constant_evaluated()) {
        -:  218:            ::operator delete(const_cast<_Tp*>(__p));
        -:  219:        } else {
        -:  220:            _VSTD::__libcpp_deallocate((void*) const_cast<_Tp *>(__p), __n * sizeof(_Tp), _LIBCPP_ALIGNOF(_Tp));
        -:  221:        }
        -:  222:    }
        -:  223:
        -:  224:    // C++20 Removed members
        -:  225:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_ALLOCATOR_MEMBERS)
        -:  226:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* pointer;
        -:  227:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp* const_pointer;
        -:  228:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& reference;
        -:  229:    _LIBCPP_DEPRECATED_IN_CXX17 typedef const _Tp& const_reference;
        -:  230:
        -:  231:    template <class _Up>
        -:  232:    struct _LIBCPP_DEPRECATED_IN_CXX17 rebind {
        -:  233:        typedef allocator<_Up> other;
        -:  234:    };
        -:  235:
        -:  236:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  237:    const_pointer address(const_reference __x) const _NOEXCEPT {
        -:  238:        return _VSTD::addressof(__x);
        -:  239:    }
        -:  240:
        -:  241:    _LIBCPP_NODISCARD_AFTER_CXX17 _LIBCPP_INLINE_VISIBILITY _LIBCPP_DEPRECATED_IN_CXX17
        -:  242:    const _Tp* allocate(size_t __n, const void*) {
        -:  243:        return allocate(__n);
        -:  244:    }
        -:  245:
        -:  246:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY size_type max_size() const _NOEXCEPT {
        -:  247:        return size_type(~0) / sizeof(_Tp);
        -:  248:    }
        -:  249:
        -:  250:    template <class _Up, class... _Args>
        -:  251:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  252:    void construct(_Up* __p, _Args&&... __args) {
        -:  253:        ::new ((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);
        -:  254:    }
        -:  255:
        -:  256:    _LIBCPP_DEPRECATED_IN_CXX17 _LIBCPP_INLINE_VISIBILITY
        -:  257:    void destroy(pointer __p) {
        -:  258:        __p->~_Tp();
        -:  259:    }
        -:  260:#endif
        -:  261:};
        -:  262:
        -:  263:template <class _Tp, class _Up>
        -:  264:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
        -:  265:bool operator==(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return true;}
        -:  266:
        -:  267:template <class _Tp, class _Up>
        -:  268:inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
        -:  269:bool operator!=(const allocator<_Tp>&, const allocator<_Up>&) _NOEXCEPT {return false;}
        -:  270:
        -:  271:_LIBCPP_END_NAMESPACE_STD
        -:  272:
        -:  273:#endif // _LIBCPP___MEMORY_ALLOCATOR_H
