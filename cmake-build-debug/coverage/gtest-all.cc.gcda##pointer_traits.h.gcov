        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX14.2.sdk/usr/include/c++/v1/__memory/pointer_traits.h
        -:    0:Graph:/Users/ivanmovile/CLionProjects/Stack/cmake-build-debug/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/Users/ivanmovile/CLionProjects/Stack/cmake-build-debug/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___MEMORY_POINTER_TRAITS_H
        -:   11:#define _LIBCPP___MEMORY_POINTER_TRAITS_H
        -:   12:
        -:   13:#include <__config>
        -:   14:#include <__memory/addressof.h>
        -:   15:#include <__type_traits/conditional.h>
        -:   16:#include <__type_traits/conjunction.h>
        -:   17:#include <__type_traits/decay.h>
        -:   18:#include <__type_traits/is_class.h>
        -:   19:#include <__type_traits/is_function.h>
        -:   20:#include <__type_traits/is_void.h>
        -:   21:#include <__type_traits/void_t.h>
        -:   22:#include <__utility/declval.h>
        -:   23:#include <cstddef>
        -:   24:
        -:   25:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   26:#  pragma GCC system_header
        -:   27:#endif
        -:   28:
        -:   29:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   30:
        -:   31:template <class _Tp, class = void>
        -:   32:struct __has_element_type : false_type {};
        -:   33:
        -:   34:template <class _Tp>
        -:   35:struct __has_element_type<_Tp, __void_t<typename _Tp::element_type> > : true_type {};
        -:   36:
        -:   37:template <class _Ptr, bool = __has_element_type<_Ptr>::value>
        -:   38:struct __pointer_traits_element_type;
        -:   39:
        -:   40:template <class _Ptr>
        -:   41:struct __pointer_traits_element_type<_Ptr, true>
        -:   42:{
        -:   43:    typedef _LIBCPP_NODEBUG typename _Ptr::element_type type;
        -:   44:};
        -:   45:
        -:   46:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:   47:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, true>
        -:   48:{
        -:   49:    typedef _LIBCPP_NODEBUG typename _Sp<_Tp, _Args...>::element_type type;
        -:   50:};
        -:   51:
        -:   52:template <template <class, class...> class _Sp, class _Tp, class ..._Args>
        -:   53:struct __pointer_traits_element_type<_Sp<_Tp, _Args...>, false>
        -:   54:{
        -:   55:    typedef _LIBCPP_NODEBUG _Tp type;
        -:   56:};
        -:   57:
        -:   58:template <class _Tp, class = void>
        -:   59:struct __has_difference_type : false_type {};
        -:   60:
        -:   61:template <class _Tp>
        -:   62:struct __has_difference_type<_Tp, __void_t<typename _Tp::difference_type> > : true_type {};
        -:   63:
        -:   64:template <class _Ptr, bool = __has_difference_type<_Ptr>::value>
        -:   65:struct __pointer_traits_difference_type
        -:   66:{
        -:   67:    typedef _LIBCPP_NODEBUG ptrdiff_t type;
        -:   68:};
        -:   69:
        -:   70:template <class _Ptr>
        -:   71:struct __pointer_traits_difference_type<_Ptr, true>
        -:   72:{
        -:   73:    typedef _LIBCPP_NODEBUG typename _Ptr::difference_type type;
        -:   74:};
        -:   75:
        -:   76:template <class _Tp, class _Up>
        -:   77:struct __has_rebind
        -:   78:{
        -:   79:private:
        -:   80:    template <class _Xp> static false_type __test(...);
        -:   81:    _LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -:   82:    template <class _Xp> static true_type __test(typename _Xp::template rebind<_Up>* = 0);
        -:   83:    _LIBCPP_SUPPRESS_DEPRECATED_POP
        -:   84:public:
        -:   85:    static const bool value = decltype(__test<_Tp>(0))::value;
        -:   86:};
        -:   87:
        -:   88:template <class _Tp, class _Up, bool = __has_rebind<_Tp, _Up>::value>
        -:   89:struct __pointer_traits_rebind
        -:   90:{
        -:   91:#ifndef _LIBCPP_CXX03_LANG
        -:   92:    typedef _LIBCPP_NODEBUG typename _Tp::template rebind<_Up> type;
        -:   93:#else
        -:   94:    typedef _LIBCPP_NODEBUG typename _Tp::template rebind<_Up>::other type;
        -:   95:#endif
        -:   96:};
        -:   97:
        -:   98:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:   99:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, true>
        -:  100:{
        -:  101:#ifndef _LIBCPP_CXX03_LANG
        -:  102:    typedef _LIBCPP_NODEBUG typename _Sp<_Tp, _Args...>::template rebind<_Up> type;
        -:  103:#else
        -:  104:    typedef _LIBCPP_NODEBUG typename _Sp<_Tp, _Args...>::template rebind<_Up>::other type;
        -:  105:#endif
        -:  106:};
        -:  107:
        -:  108:template <template <class, class...> class _Sp, class _Tp, class ..._Args, class _Up>
        -:  109:struct __pointer_traits_rebind<_Sp<_Tp, _Args...>, _Up, false>
        -:  110:{
        -:  111:    typedef _Sp<_Up, _Args...> type;
        -:  112:};
        -:  113:
        -:  114:template <class _Ptr>
        -:  115:struct _LIBCPP_TEMPLATE_VIS pointer_traits
        -:  116:{
        -:  117:    typedef _Ptr                                                     pointer;
        -:  118:    typedef typename __pointer_traits_element_type<pointer>::type    element_type;
        -:  119:    typedef typename __pointer_traits_difference_type<pointer>::type difference_type;
        -:  120:
        -:  121:#ifndef _LIBCPP_CXX03_LANG
        -:  122:    template <class _Up> using rebind = typename __pointer_traits_rebind<pointer, _Up>::type;
        -:  123:#else
        -:  124:    template <class _Up> struct rebind
        -:  125:        {typedef typename __pointer_traits_rebind<pointer, _Up>::type other;};
        -:  126:#endif // _LIBCPP_CXX03_LANG
        -:  127:
        -:  128:private:
        -:  129:    struct __nat {};
        -:  130:public:
        -:  131:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
        -:  132:    static pointer pointer_to(__conditional_t<is_void<element_type>::value, __nat, element_type>& __r)
        -:  133:        {return pointer::pointer_to(__r);}
        -:  134:};
        -:  135:
        -:  136:template <class _Tp>
        -:  137:struct _LIBCPP_TEMPLATE_VIS pointer_traits<_Tp*>
        -:  138:{
        -:  139:    typedef _Tp*      pointer;
        -:  140:    typedef _Tp       element_type;
        -:  141:    typedef ptrdiff_t difference_type;
        -:  142:
        -:  143:#ifndef _LIBCPP_CXX03_LANG
        -:  144:    template <class _Up> using rebind = _Up*;
        -:  145:#else
        -:  146:    template <class _Up> struct rebind {typedef _Up* other;};
        -:  147:#endif
        -:  148:
        -:  149:private:
        -:  150:    struct __nat {};
        -:  151:public:
        -:  152:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_SINCE_CXX20
function _ZNSt3__114pointer_traitsIPKcE10pointer_toB7v160006ERS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPcE10pointer_toB7v160006ERc called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPKDuE10pointer_toB7v160006ERS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPKDsE10pointer_toB7v160006ERS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPKDiE10pointer_toB7v160006ERS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPKwE10pointer_toB7v160006ERS1_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPNS_16__hash_node_baseIPNS_11__hash_nodeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPvEEEEE10pointer_toB7v160006ERSC_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEEE10pointer_toB7v160006ERS6_ called 3 returned 100% blocks executed 100%
function _ZNSt3__114pointer_traitsIPNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEEE10pointer_toB7v160006ERS9_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPNS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmEEE10pointer_toB7v160006ERS8_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPNS_16__list_node_baseINS_4pairIcPKcEEPvEEE10pointer_toB7v160006ERS7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPKNS_4pairIcPKcEEE10pointer_toB7v160006ERS5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPKPN7testing9TestSuiteEE10pointer_toB7v160006ERS4_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPKNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7testing8internal12CodeLocationEEEE10pointer_toB7v160006ERSD_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPKNS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7testing8internal12CodeLocationEEEE10pointer_toB7v160006ERSC_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPNS_4pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE10pointer_toB7v160006ERSD_ called 0 returned 0% blocks executed 0%
function _ZNSt3__114pointer_traitsIPNS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE10pointer_toB7v160006ERSC_ called 0 returned 0% blocks executed 0%
        3:  153:    static pointer pointer_to(__conditional_t<is_void<element_type>::value, __nat, element_type>& __r) _NOEXCEPT
        3:  154:        {return _VSTD::addressof(__r);}
    $$$$$:  154-block  0
    $$$$$:  154-block  1
    $$$$$:  154-block  2
    $$$$$:  154-block  3
    $$$$$:  154-block  4
    $$$$$:  154-block  5
    $$$$$:  154-block  6
        3:  154-block  7
    $$$$$:  154-block  8
    $$$$$:  154-block  9
    $$$$$:  154-block 10
    $$$$$:  154-block 11
    $$$$$:  154-block 12
    $$$$$:  154-block 13
    $$$$$:  154-block 14
    $$$$$:  154-block 15
    $$$$$:  154-block 16
        -:  155:};
        -:  156:
        -:  157:#ifndef _LIBCPP_CXX03_LANG
        -:  158:template <class _From, class _To>
        -:  159:using __rebind_pointer_t = typename pointer_traits<_From>::template rebind<_To>;
        -:  160:#else
        -:  161:template <class _From, class _To>
        -:  162:using __rebind_pointer_t = typename pointer_traits<_From>::template rebind<_To>::other;
        -:  163:#endif
        -:  164:
        -:  165:// to_address
        -:  166:
        -:  167:template <class _Pointer, class = void>
        -:  168:struct __to_address_helper;
        -:  169:
        -:  170:template <class _Tp>
        -:  171:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
function _ZNSt3__112__to_addressB7v160006IPcEEPT_S3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEPT_S8_ called 223 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB7v160006IcEEPT_S2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006IKcEEPT_S3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006IKDuEEPT_S3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006IKDsEEPT_S3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006IKDiEEPT_S3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006IKwEEPT_S3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006IN7testing14TestPartResultEEEPT_S4_ called 60 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB7v160006IdEEPT_S2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006INS_6vectorIdNS_9allocatorIdEEEEEEPT_S6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006IN7testing8internal13edit_distance8EditTypeEEEPT_S6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006INS_6vectorIN7testing8internal13edit_distance8EditTypeENS_9allocatorIS5_EEEEEEPT_SA_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006ImEEPT_S2_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006IN7testing12TestPropertyEEEPT_S4_ called 60 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB7v160006IiEEPT_S2_ called 78 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB7v160006IPN7testing8TestInfoEEEPT_S5_ called 69 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB7v160006IPN7testing17TestEventListenerEEEPT_S5_ called 9 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB7v160006IPN7testing11EnvironmentEEEPT_S5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006IN7testing8internal9TraceInfoEEEPT_S5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006IPN7testing8internal30ParameterizedTestSuiteInfoBaseEEEPT_S6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006IPN7testing9TestSuiteEEEPT_S5_ called 9 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB7v160006IKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEPT_S9_ called 0 returned 0% blocks executed 0%
      508:  172:_Tp* __to_address(_Tp* __p) _NOEXCEPT {
        -:  173:    static_assert(!is_function<_Tp>::value, "_Tp is a function type");
      508:  174:    return __p;
    $$$$$:  174-block  0
      223:  174-block  1
    $$$$$:  174-block  2
    $$$$$:  174-block  3
    $$$$$:  174-block  4
    $$$$$:  174-block  5
    $$$$$:  174-block  6
    $$$$$:  174-block  7
       60:  174-block  8
    $$$$$:  174-block  9
    $$$$$:  174-block 10
    $$$$$:  174-block 11
    $$$$$:  174-block 12
    $$$$$:  174-block 13
       60:  174-block 14
       78:  174-block 15
       69:  174-block 16
        9:  174-block 17
    $$$$$:  174-block 18
    $$$$$:  174-block 19
    $$$$$:  174-block 20
        9:  174-block 21
    $$$$$:  174-block 22
        -:  175:}
        -:  176:
        -:  177:template <class _Pointer, class = void>
        -:  178:struct _HasToAddress : false_type {};
        -:  179:
        -:  180:template <class _Pointer>
        -:  181:struct _HasToAddress<_Pointer,
        -:  182:    decltype((void)pointer_traits<_Pointer>::to_address(std::declval<const _Pointer&>()))
        -:  183:> : true_type {};
        -:  184:
        -:  185:template <class _Pointer, class = void>
        -:  186:struct _HasArrow : false_type {};
        -:  187:
        -:  188:template <class _Pointer>
        -:  189:struct _HasArrow<_Pointer,
        -:  190:    decltype((void)std::declval<const _Pointer&>().operator->())
        -:  191:> : true_type {};
        -:  192:
        -:  193:template <class _Pointer>
        -:  194:struct _IsFancyPointer {
        -:  195:  static const bool value = _HasArrow<_Pointer>::value || _HasToAddress<_Pointer>::value;
        -:  196:};
        -:  197:
        -:  198:// enable_if is needed here to avoid instantiating checks for fancy pointers on raw pointers
        -:  199:template <class _Pointer, class = __enable_if_t<
        -:  200:    _And<is_class<_Pointer>, _IsFancyPointer<_Pointer> >::value
        -:  201:> >
        -:  202:_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -:  203:typename decay<decltype(__to_address_helper<_Pointer>::__call(std::declval<const _Pointer&>()))>::type
function _ZNSt3__112__to_addressB7v160006INS_16reverse_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callclsr3stdE7declvalIRKSB_EEEEE4typeESD_ called 5 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB7v160006INS_16reverse_iteratorIPN7testing14TestPartResultEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callclsr3stdE7declvalIRKS7_EEEEE4typeES9_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006INS_16reverse_iteratorINS1_IPN7testing14TestPartResultEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callclsr3stdE7declvalIRKS8_EEEEE4typeESA_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006INS_16reverse_iteratorINS1_IPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callclsr3stdE7declvalIRKSC_EEEEE4typeESE_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006INS_11__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callclsr3stdE7declvalIRKSB_EEEEE4typeESD_ called 18 returned 100% blocks executed 100%
function _ZNSt3__112__to_addressB7v160006INS_16reverse_iteratorIPdEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callclsr3stdE7declvalIRKS5_EEEEE4typeES7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006INS_16reverse_iteratorIPN7testing8internal13edit_distance8EditTypeEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callclsr3stdE7declvalIRKS9_EEEEE4typeESB_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006INS_16reverse_iteratorIPN7testing12TestPropertyEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callclsr3stdE7declvalIRKS7_EEEEE4typeES9_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006INS_16reverse_iteratorINS1_IPN7testing12TestPropertyEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callclsr3stdE7declvalIRKS8_EEEEE4typeESA_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006INS_16reverse_iteratorIPN7testing8internal9TraceInfoEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callclsr3stdE7declvalIRKS8_EEEEE4typeESA_ called 0 returned 0% blocks executed 0%
function _ZNSt3__112__to_addressB7v160006INS_16reverse_iteratorINS1_IPN7testing8internal9TraceInfoEEEEEvEENS_5decayIDTclsr19__to_address_helperIT_EE6__callclsr3stdE7declvalIRKS9_EEEEE4typeESB_ called 0 returned 0% blocks executed 0%
       23:  204:__to_address(const _Pointer& __p) _NOEXCEPT {
       23:  205:    return __to_address_helper<_Pointer>::__call(__p);
        5:  205-block  0
    $$$$$:  205-block  1
    $$$$$:  205-block  2
    $$$$$:  205-block  3
       18:  205-block  4
    $$$$$:  205-block  5
    $$$$$:  205-block  6
    $$$$$:  205-block  7
    $$$$$:  205-block  8
    $$$$$:  205-block  9
    $$$$$:  205-block 10
        -:  206:}
        -:  207:
        -:  208:template <class _Pointer, class>
        -:  209:struct __to_address_helper {
        -:  210:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -:  211:    static decltype(_VSTD::__to_address(std::declval<const _Pointer&>().operator->()))
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEvE6__callB7v160006ERKS9_ called 5 returned 100% blocks executed 66%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorIPN7testing14TestPartResultEEEvE6__callB7v160006ERKS5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorINS1_IPN7testing14TestPartResultEEEEEvE6__callB7v160006ERKS6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorINS1_IPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEEvE6__callB7v160006ERKSA_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorIPdEEvE6__callB7v160006ERKS3_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorIPN7testing8internal13edit_distance8EditTypeEEEvE6__callB7v160006ERKS7_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorIPN7testing12TestPropertyEEEvE6__callB7v160006ERKS5_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorINS1_IPN7testing12TestPropertyEEEEEvE6__callB7v160006ERKS6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorIPN7testing8internal9TraceInfoEEEvE6__callB7v160006ERKS6_ called 0 returned 0% blocks executed 0%
function _ZNSt3__119__to_address_helperINS_16reverse_iteratorINS1_IPN7testing8internal9TraceInfoEEEEEvE6__callB7v160006ERKS7_ called 0 returned 0% blocks executed 0%
        5:  212:    __call(const _Pointer& __p) _NOEXCEPT {
        5:  213:        return _VSTD::__to_address(__p.operator->());
        5:  213-block  0
branch  0 taken 5
branch  1 taken 0
        5:  213-block  1
    $$$$$:  213-block  2
    $$$$$:  213-block  3
branch  2 never executed
branch  3 never executed
    $$$$$:  213-block  4
    $$$$$:  213-block  5
    $$$$$:  213-block  6
branch  4 never executed
branch  5 never executed
    $$$$$:  213-block  7
    $$$$$:  213-block  8
    $$$$$:  213-block  9
branch  6 never executed
branch  7 never executed
    $$$$$:  213-block 10
    $$$$$:  213-block 11
    $$$$$:  213-block 12
branch  8 never executed
branch  9 never executed
    $$$$$:  213-block 13
    $$$$$:  213-block 14
    $$$$$:  213-block 15
branch 10 never executed
branch 11 never executed
    $$$$$:  213-block 16
    $$$$$:  213-block 17
    $$$$$:  213-block 18
branch 12 never executed
branch 13 never executed
    $$$$$:  213-block 19
    $$$$$:  213-block 20
    $$$$$:  213-block 21
branch 14 never executed
branch 15 never executed
    $$$$$:  213-block 22
    $$$$$:  213-block 23
    $$$$$:  213-block 24
branch 16 never executed
branch 17 never executed
    $$$$$:  213-block 25
    $$$$$:  213-block 26
    $$$$$:  213-block 27
branch 18 never executed
branch 19 never executed
    $$$$$:  213-block 28
    $$$$$:  213-block 29
        -:  214:    }
        -:  215:};
        -:  216:
        -:  217:template <class _Pointer>
        -:  218:struct __to_address_helper<_Pointer, decltype((void)pointer_traits<_Pointer>::to_address(std::declval<const _Pointer&>()))> {
        -:  219:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -:  220:    static decltype(pointer_traits<_Pointer>::to_address(std::declval<const _Pointer&>()))
function _ZNSt3__119__to_address_helperINS_11__wrap_iterIPNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEvE6__callB7v160006ERKS9_ called 18 returned 100% blocks executed 100%
       18:  221:    __call(const _Pointer& __p) _NOEXCEPT {
       18:  222:        return pointer_traits<_Pointer>::to_address(__p);
       18:  222-block  0
        -:  223:    }
        -:  224:};
        -:  225:
        -:  226:#if _LIBCPP_STD_VER > 17
        -:  227:template <class _Tp>
        -:  228:inline _LIBCPP_INLINE_VISIBILITY constexpr
        -:  229:auto to_address(_Tp *__p) noexcept {
        -:  230:    return _VSTD::__to_address(__p);
        -:  231:}
        -:  232:
        -:  233:template <class _Pointer>
        -:  234:inline _LIBCPP_INLINE_VISIBILITY constexpr
        -:  235:auto to_address(const _Pointer& __p) noexcept -> decltype(std::__to_address(__p)) {
        -:  236:    return _VSTD::__to_address(__p);
        -:  237:}
        -:  238:#endif
        -:  239:
        -:  240:_LIBCPP_END_NAMESPACE_STD
        -:  241:
        -:  242:#endif // _LIBCPP___MEMORY_POINTER_TRAITS_H
